/** @file io.c
 *
 * @brief Kernel I/O syscall implementations
 *
 * @author Mike Kasick <mkasick@andrew.cmu.edu>
 * @date   Sun, 14 Oct 2007 00:07:38 -0400
 *
 * @author Kartik Subramanian <ksubrama@andrew.cmu.edu>
 * @date   2008-11-16
 */

#include <types.h>
#include <bits/errno.h>
#include <bits/fileno.h>
#include <arm/physmem.h>
#include <syscall.h>
#include <exports.h>
#include <kernel.h>

#define EOT_CHAR 0x04
#define DEL_CHAR 0x7f


/* Read count bytes (or less) from fd into the buffer buf. */
ssize_t read_syscall(int fd __attribute__((unused)), void *buf __attribute__((unused)), size_t count __attribute__((unused)))
{
	
	char *cbuf = (char *)buf;

	if (fd != STDIN_FILENO)
	{
		printf("Error: wrong file number\n");
		return -EBADF;
	}
	if ((unsigned)cbuf < 0xa0000000 || ((unsigned)cbuf + count > 0xa3ffffff))
	{
		printf("Error: bad address\n");		
		return -EFAULT;
	}
	
	int id = 0;
	while (1)
	{
		if (id >= (int)count)
		{
			cbuf[id] = '\0';
			putc('\n');
			return id;
		}		
		if (tstc())
		{
			char c = (char)getc();
			if (c == 4)	// EOT character
			{
				cbuf[id] = '\0';
				putc('\n');
				return id;
			}
			else if (c == 8 || c == 127)	// backspace or delete
			{
				if (id == 0)
				{
					continue;
				}
				id --;
				cbuf[id--] = '\0';
				//id --;
				putc('\b');
				putc(' ');
				putc('\b');
			}
			else if (c == 10 || c == 13)	// newline or carriage return
			{
				cbuf[id] = c;
				id ++;
				cbuf[id] = '\0';
				putc('\n');
				return id;
			}
			else
			{
				cbuf[id] = c;
				putc(c);
			}
			id ++;
		}
	}

	return 0;
	
}

/* Write count bytes to fd from the buffer buf. */
ssize_t write_syscall(int fd  __attribute__((unused)), const void *buf  __attribute__((unused)), size_t count  __attribute__((unused)))
{

  return 1; /* remove this return line after you have added your code here */
	
}

